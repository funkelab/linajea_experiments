from linajea.visualization.mamut import (
        MamutWriter, MamutMongoReader, MamutFileReader,
        MamutMatchedTracksReader)
import argparse
import json
import sys
import logging

logging.basicConfig(level=logging.INFO)


def export_db(
        candidate_db_name,
        gt_db_name,
        db_host,
        frames,
        bdv_xml,
        output_xml,
        parameters_id,
        scale=1.0,
        gt=False,
        only_gt_matched=False):
    writer = MamutWriter()
    if only_gt_matched:
        reader = MamutMatchedTracksReader(db_host)
        specs = {
            'db_name': candidate_db_name,
            'parameters_id': parameters_id,
            'frames': frames,
            'group': 1,
            'gt_db_name': gt_db_name,
        }
        writer.add_data(reader, specs)
    else:
        reader = MamutMongoReader(db_host)
        specs = {
            'db_name': candidate_db_name,
            'parameters_id': parameters_id,
            'frames': frames,
            'group': 1
        }
        writer.add_data(reader, specs)
        if gt:
            gt_specs = {
                'db_name': gt_db_name,
                'frames': frames,
                'group': 2
            }
            writer.add_data(reader, gt_specs)
    writer.write(bdv_xml, output_xml)


def export_file(filename, bdv_xml, output_xml):
    specs = {
        'filename': filename,
    }
    writer = MamutWriter()
    reader = MamutFileReader()
    writer.add_data(reader, specs)
    writer.write(bdv_xml, output_xml)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--filename',
        type=str,
        help='tab separated tracks file')
    parser.add_argument(
        '--config',
        type=str,
        help='JSON configuration file',
        required=True)
    parser.add_argument(
        '--params-id',
        type=str,
        help='ID of parameters to export results for')
    parser.add_argument(
        '--bdv-xml',
        type=str,
        help='BDV xml file (as generated by Fiji\'s BDV export)',
        required=True)
    parser.add_argument(
        '--output',
        type=str,
        help='MaMuT file to generate',
        required=True)
    parser.add_argument(
        '--scale',
        type=float,
        default=1.0,
        help='Optionally scale coordinates by this factor for export')
    parser.add_argument(
        '--only-matched',
        action='store_true',
        help='Export only tracks that have been matched to the GT.')
    parser.add_argument(
        '--gt',
        action='store_true',
        help='Include GT.')
    args = parser.parse_args()
    if args.filename is not None:
        export_file(
            args.filename,
            args.bdv_xml,
            args.output)
        sys.exit()

    with open(args.config, 'r') as f:
        config = json.load(f)
    candidate_db_name = config['db_name']
    db_host = config['db_host']
    if 'frames' in config:
        frames = config['frames']
    else:
        frames = [None, None]
    gt_db_name = config['gt_db_name']

    export_db(
            candidate_db_name,
            gt_db_name,
            db_host,
            frames,
            args.bdv_xml,
            args.output,
            parameters_id=args.params_id,
            gt=args.gt,
            only_gt_matched=args.only_matched,
            scale=args.scale)
